/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3-rc-3/userguide/java_library_plugin.html
 */

plugins {
 id 'eclipse'
  id 'idea'
//  id 'war'
  id 'application'
    id 'java-library'
     id 'org.openjfx.javafxplugin' version '0.0.8'
//  id "org.javamodularity.moduleplugin" version "1.6.0"
  id 'org.beryx.jlink' version '2.21.0'
  id 'project-report'
    id 'net.nemerosa.versioning' version '2.6.1'
       id "dev.jacomet.logging-capabilities" version "0.9.0"
     
}



java {
  sourceCompatibility = JavaVersion.VERSION_14
  targetCompatibility = JavaVersion.VERSION_14
  //modularity.inferModulePath = true
}

javafx {
  version = "14"
  modules = [
	'javafx.controls',
	'javafx.fxml',
	'javafx.swing'
  ]
}


repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.

      google()
  mavenCentral()
      jcenter()
}

String javaFxVersion = '14'
String mod = 'linux'

dependencies {
// https://mvnrepository.com/artifact/org.hsqldb/hsqldb
//compile group: 'org.hsqldb', name: 'hsqldb', version: '2.5.1'

// https://mvnrepository.com/artifact/org.apache.derby/derby
compile group: 'org.apache.derby', name: 'derby', version: '10.14.2.0'

 	compile "fr.brouillard.oss:cssfx:11.4.0"
    /*
    implementation group: 'org.openjfx', name: 'javafx-base', version: javaFxVersion, classifier: mod
    implementation group: 'org.openjfx', name: 'javafx-swing', version: javaFxVersion, classifier: mod
    implementation group: 'org.openjfx', name: 'javafx-controls', version: javaFxVersion, classifier: mod
    implementation group: 'org.openjfx', name: 'javafx-fxml', version: javaFxVersion, classifier: mod
    implementation group: 'org.openjfx', name: 'javafx-graphics', version: javaFxVersion, classifier: mod
    implementation group: 'org.openjfx', name: 'javafx-media', version: javaFxVersion, classifier: mod
    implementation group: 'org.openjfx', name: 'javafx-web', version: javaFxVersion, classifier: mod
*/
// https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa
implementation group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: '3.0.0-M1'

// https://mvnrepository.com/artifact/jakarta.activation/jakarta.activation-api
implementation group: 'jakarta.activation', name: 'jakarta.activation-api', version: '2.0.0-RC3'

// https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa.modelgen.processor
annotationProcessor group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa.modelgen.processor', version: '3.0.0-M1'

// https://mvnrepository.com/artifact/jakarta.transaction/jakarta.transaction-api
compile group: 'jakarta.transaction', name: 'jakarta.transaction-api', version: '2.0.0-RC2'

compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.12'

  testCompileOnly 'org.projectlombok:lombok:1.18.12'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

// https://mvnrepository.com/artifact/org.apache.commons/commons-csv
implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

	// https://mvnrepository.com/artifact/org.jboss.weld.se/weld-se-core
compile group: 'org.jboss.weld.se', name: 'weld-se-core', version: '4.0.0.Alpha3'

// https://mvnrepository.com/artifact/org.eclipse.persistence/org.eclipse.persistence.jpa
compile group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.jpa', version: '3.0.0-M1'

  // Use JUnit test framework
  testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
  
 
 // https://mvnrepository.com/artifact/org.kordamp.ikonli/ikonli-javafx
  implementation group: 'org.kordamp.ikonli', name: 'ikonli-javafx', version: '11.3.5'
  // https://mvnrepository.com/artifact/org.kordamp.ikonli/ikonli-fontawesome5-pack
  implementation group: 'org.kordamp.ikonli', name: 'ikonli-fontawesome5-pack', version: '11.3.5'

}

ext {
    metamodelPath="$buildDir/generated/sources/metamodel/main/java"
    persistenceXMLLocation="src/main/resources/META-INF/persistence.xml"
}

compileJava {
    doFirst {
        file(metamodelPath).delete()
        file(metamodelPath).mkdirs()
    }
    options.compilerArgs += ["-Aeclipselink.persistencexml=${new File(project.projectDir, persistenceXMLLocation).absolutePath}", '-s', metamodelPath]
    
}

mainClassName = 'ir.hosseinmp76.workFlowPlanner.ui.Fuck'


run {
  standardInput = System.in
}

jar {
  manifest {
	  attributes(
			  'Main-Class': 'ir.hosseinmp76.workFlowPlanner.ui.Fuck',
			  'Built-By'       : System.properties['user.name'],
			  'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
			  'Build-Revision' : versioning.info.commit,
			  'Created-By'     : "Gradle ${gradle.gradleVersion}",
			  'Build-Jdk'      : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
			  'Build-OS'       : "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
	  )
  }
}

task copyResources(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${buildDir}/classes/java/main"
}

processResources.dependsOn copyResources

task copyResources2(type: Copy) {
    from "${projectDir}/src/main/resources"
    into "${projectDir}/bin/java/main"
}

processResources.dependsOn copyResources2


eclipse {
	classpath {
		downloadSources = true
	    downloadJavadoc = true
	}
}

sourceSets {
// main.java.srcDir metamodelPath
    main {
        java {
            resources {
                srcDir("src/main/resources")
                include("**/*.*")
                
            }
        //    include '$buildDir/generated/sources/metamodel/main/java/*'
        }
    }
}

sourceSets.main.java.srcDir "src/main/conf"

run {
    jvmArgs '-cp', 'src/main/resources'
}




test {
  useJUnitPlatform()
  testLogging {
	events "passed", "skipped", "failed"
  }
}


